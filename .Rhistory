p <- as.data.frame(predict(model_list,
newdata=validation))
predict(model_list,
newdata=validation))
predict(model_list,
newdata=validation)
model_list
p2 <- lapply(model_list, predict, newdata=validation,
type='raw')
greedy_ensemble <- caretEnsemble(model_list)
summary(greedy_ensemble)
model_list
greedy_ensemble <- caretEnsemble(model_list)
summary(greedy_ensemble)
# Actual predictions on test data
testingData <- testingData[,names(testingData)!="Survived"]
# Model 1: Random Forests
predsRF <- predict(modelRF, testingData)
predsRF <- as.character(predsRF)
predsRF[predsRF=="X1"] <- 0
predsRF[predsRF=="X2"] <- 1
predsRF <- as.numeric(predsRF)
predsRF <- data.frame(PassengerId=testingData$PassengerId,
Survived=predsRF)
# Model 2
predsAda <- predict(modelAda, testingData)
predsAda <- as.character(predsAda)
predsAda[predsAda=="X1"] <- 0
predsAda[predsAda=="X2"] <- 1
predsAda <- as.numeric(predsAda)
predsAda <- data.frame(PassengerId=testingData$PassengerId,
Survived=predsAda)
# Model 1 + 2
predsRFAda <- predict(greedy_ensemble,
newdata=testingData) # this returns probability of X2
predsRFAda <- data.frame(p_X2=predsRFAda)
predsRFAda$Survived[predsRFAda$p_X2>=0.5] <- 1
predsRFAda$Survived[predsRFAda$p_X2<0.5] <- 0
predsRFAda <- data.frame(PassengerId=testingData$PassengerId,
Survived=predsRFAda$Survived)
write.csv(predsRF,file="titanic_RF_solution.csv",
row.names=FALSE, quote=FALSE)
write.csv(predsAda,file="titanic_ADA_solution.csv",
row.names=FALSE, quote=FALSE)
write.csv(predsRFAda,file="titanic_RFADA_solution.csv",
row.names=FALSE, quote=FALSE)
greedy_ensemble <- caretEnsemble(model_list)
summary(greedy_ensemble)
confM_Ada
confM_RF
library(ggplot2)
library(caret)
library(tidyr)
library(stringr)
library(caretEnsemble)
set.seed(1000)
# Read in the data from the .csv files,
# but avoid converting all Strings to factors.
trainInput <- read.csv("trainTitanicOriginal.csv",
na.strings="NA",
stringsAsFactors=FALSE)
testInput <- read.csv("testTitanicOriginal.csv",
na.strings="NA",
stringsAsFactors=FALSE)
# Supplement the testing data with an empty column for "Survived"
testInput$Survived <- NA
# Combine the datasets into one large one for data manipulation
dataset <- rbind(trainInput,testInput)
# Some variables should be factors, convert these manually.
dataset$Sex <- as.factor(dataset$Sex)
dataset$Pclass <- as.factor(dataset$Pclass)
dataset$Survived <- as.factor(dataset$Survived)
dataset$Embarked <- as.factor(dataset$Embarked)
library(tidyr)
library(stringr)
dataset$CabinLevel <- str_extract(dataset$Cabin, "[A-Z]*")
dataset$CabinLevel[is.na(dataset$CabinLevel)] <- "U" # U for unknown
# Looks good. To use it, we store it as a factor.
dataset$CabinLevel <- as.factor(dataset$CabinLevel)
# Let's also extract the cabin number, as they increased towards
# the back of the deck. We want to keep this one numeric, so we impute '0'
# for missing values.
dataset$CabinNo <- extract_numeric(dataset$Cabin)
dataset$CabinNo[is.na(dataset$CabinNo)] <- 0
# Let's extract the titles. They can be found in between a comma and a dot;
dataset$Title <- as.character(do.call(rbind.data.frame,
strsplit(dataset$Name,
split='[,.]'))[[2]])
# Strip leading space off
dataset$Title <- sub(' ', '', dataset$Title)
# What did we get?
table(dataset$Title)
# Some of these are very rare. Let's combine some of those, based on
# what makes sense in the context of the early 20th century class system.
dataset$Title[dataset$Title == "Mlle"] <- "Miss"
dataset$Title[dataset$Title %in% c("Mme","Ms")] <- "Mrs"
dataset$Title[dataset$Title %in% c("Capt", "Col", "Don", "Dr",
"Major", "Jonkheer")] <- "Sir"
dataset$Title[dataset$Title %in% c("Dona", "Lady",
"the Countess")] <- "Lady"
# The result:
table(dataset$Title)
# Looks good - let's store it as a factor.
dataset$Title <- as.factor(dataset$Title)
dataset$FamilySize<- dataset$SibSp + dataset$Parch + 1 # count passenger's self too
dataset$LastName <- as.character(do.call(rbind.data.frame,
strsplit(dataset$Name,
split='[,.]'))[[1]])
dataset$FamilyID <- paste(as.character(dataset$FamilySize),
dataset$LastName, sep="_")
dataset$FamilyID[dataset$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(dataset$FamilyID))
wrongIDs <- famIDs[famIDs$Freq <= 2,]
dataset$FamilyID[dataset$FamilyID %in% wrongIDs$Var1] <- 'Small'
# Too many levels still to make a factor variable, rename large ones:
dataset$FamilyID[dataset$FamilySize >= 5] <- 'Large'
# Now, we can convert this to a factor.
dataset$FamilyID <- as.factor(dataset$FamilyID)
# Extract the alphanumeric prefix
dataset$TicketPrefix <- str_extract(toupper(dataset$Ticket),
"([A-Z\\.\\/]+)")
dataset$TicketPrefix <- gsub('[\\.?\\/?]', '', dataset$TicketPrefix)
dataset$TicketPrefix <- gsub('STON', 'SOTON', dataset$TicketPrefix)
dataset$TicketPrefix[is.na(dataset$TicketPrefix)] <- "U" # U for unknown
dataset$TicketPrefix <- as.factor(dataset$TicketPrefix)# Convert to factors
# Extract the ticket number - We want to keep this one numeric,
# so we impute '0' for missing values.
dataset$TicketNo <- str_extract(toupper(dataset$Ticket),"([\\d]+$)")
dataset$TicketNo[is.na(dataset$TicketNo)] <- 0
dataset$TicketNo <- as.numeric(dataset$TicketNo)
f = "Pclass"
levels <- unique(c(dataset[[f]]))
dataset[[f]] <- factor(dataset[[f]],labels=make.names(levels))
ageModel <- train(Age~Sex+Pclass+Embarked+Title+Parch+SibSp+FamilySize,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
predsAge <- predict(ageModel,dataset)
cor(predsAge,dataset$Age,use="na.or.complete")
?train
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,
method="class", control=rpart.control( your controls ))
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=dataset[!is.na(combi$Age),], method="anova")
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=dataset[!is.na(dataset$Age),], method="anova")
predsAge <- predict(ageModel,dataset)
cor(predsAge,dataset$Age,use="na.or.complete")
predsAge <- predict(Agefit,dataset)
cor(predsAge,dataset$Age,use="na.or.complete")
summary(dataset$Embarked)
str(dataset)
which(dataset$Embarked == '')
combi$Embarked[which(dataset$Embarked == '')] = "S"
dataset$Embarked[which(dataset$Embarked == '')] = "S"
str(dataset$Embarked)
summary(dataset$Embarked)
library(ggplot2)
library(caret)
library(tidyr)
library(stringr)
library(caretEnsemble)
set.seed(1000)
# Read in the data from the .csv files,
# but avoid converting all Strings to factors.
trainInput <- read.csv("trainTitanicOriginal.csv",
na.strings="NA",
stringsAsFactors=FALSE)
testInput <- read.csv("testTitanicOriginal.csv",
na.strings="NA",
stringsAsFactors=FALSE)
# Supplement the testing data with an empty column for "Survived"
testInput$Survived <- NA
# Combine the datasets into one large one for data manipulation
dataset <- rbind(trainInput,testInput)
# Some variables should be factors, convert these manually.
dataset$Sex <- as.factor(dataset$Sex)
dataset$Pclass <- as.factor(dataset$Pclass)
dataset$Survived <- as.factor(dataset$Survived)
library(tidyr)
library(stringr)
dataset$CabinLevel <- str_extract(dataset$Cabin, "[A-Z]*")
dataset$CabinLevel[is.na(dataset$CabinLevel)] <- "U" # U for unknown
# Looks good. To use it, we store it as a factor.
dataset$CabinLevel <- as.factor(dataset$CabinLevel)
# Let's also extract the cabin number, as they increased towards
# the back of the deck. We want to keep this one numeric, so we impute '0'
# for missing values.
dataset$CabinNo <- extract_numeric(dataset$Cabin)
dataset$CabinNo[is.na(dataset$CabinNo)] <- 0
# Let's extract the titles. They can be found in between a comma and a dot;
dataset$Title <- as.character(do.call(rbind.data.frame,
strsplit(dataset$Name,
split='[,.]'))[[2]])
# Strip leading space off
dataset$Title <- sub(' ', '', dataset$Title)
# What did we get?
table(dataset$Title)
# Some of these are very rare. Let's combine some of those, based on
# what makes sense in the context of the early 20th century class system.
dataset$Title[dataset$Title == "Mlle"] <- "Miss"
dataset$Title[dataset$Title %in% c("Mme","Ms")] <- "Mrs"
dataset$Title[dataset$Title %in% c("Capt", "Col", "Don", "Dr",
"Major", "Jonkheer")] <- "Sir"
dataset$Title[dataset$Title %in% c("Dona", "Lady",
"the Countess")] <- "Lady"
# The result:
table(dataset$Title)
# Looks good - let's store it as a factor.
dataset$Title <- as.factor(dataset$Title)
dataset$FamilySize<- dataset$SibSp + dataset$Parch + 1 # count passenger's self too
dataset$LastName <- as.character(do.call(rbind.data.frame,
strsplit(dataset$Name,
split='[,.]'))[[1]])
dataset$FamilyID <- paste(as.character(dataset$FamilySize),
dataset$LastName, sep="_")
dataset$FamilyID[dataset$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(dataset$FamilyID))
wrongIDs <- famIDs[famIDs$Freq <= 2,]
dataset$FamilyID[dataset$FamilyID %in% wrongIDs$Var1] <- 'Small'
# Too many levels still to make a factor variable, rename large ones:
dataset$FamilyID[dataset$FamilySize >= 5] <- 'Large'
# Now, we can convert this to a factor.
dataset$FamilyID <- as.factor(dataset$FamilyID)
# Extract the alphanumeric prefix
dataset$TicketPrefix <- str_extract(toupper(dataset$Ticket),
"([A-Z\\.\\/]+)")
dataset$TicketPrefix <- gsub('[\\.?\\/?]', '', dataset$TicketPrefix)
dataset$TicketPrefix <- gsub('STON', 'SOTON', dataset$TicketPrefix)
dataset$TicketPrefix[is.na(dataset$TicketPrefix)] <- "U" # U for unknown
dataset$TicketPrefix <- as.factor(dataset$TicketPrefix)# Convert to factors
# Extract the ticket number - We want to keep this one numeric,
# so we impute '0' for missing values.
dataset$TicketNo <- str_extract(toupper(dataset$Ticket),"([\\d]+$)")
dataset$TicketNo[is.na(dataset$TicketNo)] <- 0
dataset$TicketNo <- as.numeric(dataset$TicketNo)
f = "Pclass"
levels <- unique(c(dataset[[f]]))
dataset[[f]] <- factor(dataset[[f]],labels=make.names(levels))
# DEALING WITH MISSING VALUES
##mean imputing: bad results
#dataset[is.na(dataset$Age),]$Age <- mean(dataset$Age, na.rm = TRUE)
#dataset[is.na(dataset$Fare),]$Fare <- mean(dataset$Fare, na.rm = TRUE)
##Skipping in train, mean in test: bad results
#testingData <- dataset[is.na(dataset$Survived),]
#dataset <- dataset[!is.na(dataset$Survived),]
#dataset <- dataset[!is.na(dataset$Age),]
#testingData[is.na(testingData$Age),]$Age <- mean(testingData$Age,
#                                                 na.rm = TRUE)
#testingData[is.na(testingData$Fare),]$Fare <- mean(testingData$Fare,
#                                                   na.rm = TRUE)
#Fill in missing values for "Embarked"
combi$Embarked[which(dataset$Embarked == '')] = "S"
combi$Embarked <- factor(combi$Embarked)
#Using rf model prediction
ageModel <- train(Age~Sex+Pclass+Embarked+Title+Parch+SibSp+FamilySize,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
predsAge <- predict(ageModel,dataset)
cor(predsAge,dataset$Age,use="na.or.complete")
#good enough, use it to fill in missing values:
dataset[is.na(dataset$Age),]$Age <- predsAge[is.na(dataset$Age)]
fareModel <- train(Fare~Sex+Pclass+Embarked+Title+Parch+SibSp+FamilySize,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
predsFare <- predict(fareModel,dataset)
cor(predsFare,dataset$Fare,use="na.or.complete")
#good enough, use it to fill in missing values:
dataset[is.na(dataset$Fare),]$Fare <- predsFare[is.na(dataset$Fare)]
dataset$Embarked[which(dataset$Embarked == '')] = "S"
dataset$Embarked <- factor(dataset$Embarked)
#Using rf model prediction
ageModel <- train(Age~Sex+Pclass+Embarked+Title+Parch+SibSp+FamilySize,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
predsAge <- predict(ageModel,dataset)
cor(predsAge,dataset$Age,use="na.or.complete")
#good enough, use it to fill in missing values:
dataset[is.na(dataset$Age),]$Age <- predsAge[is.na(dataset$Age)]
fareModel <- train(Fare~Sex+Pclass+Embarked+Title+Parch+SibSp+FamilySize,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
predsFare <- predict(fareModel,dataset)
cor(predsFare,dataset$Fare,use="na.or.complete")
#good enough, use it to fill in missing values:
dataset[is.na(dataset$Fare),]$Fare <- predsFare[is.na(dataset$Fare)]
dataset$FamilyID <- paste(as.character(dataset$FamilySize),
dataset$LastName, sep="_")
dataset$FamilyID[dataset$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(dataset$FamilyID))
wrongIDs <- famIDs[famIDs$Freq <= 2,]
dataset$FamilyID[dataset$FamilyID %in% wrongIDs$Var1] <- 'Small'
# Now, we can convert this to a factor.
dataset$FamilyID <- as.factor(dataset$FamilyID)
dataset$FamilyID2 <- dataset$FamilyID
dataset$FamilyID2 <- as.character(dataset$FamilyID2)
dataset$FamilyID2[dataset$FamilySize <= 3] <- 'Small'
# Now, we can convert this to a factor.
dataset$FamilyID2 <- as.factor(dataset$FamilyID2)
install.packages('party')
library(party)
predsParty <- predict(partyModel, testingData,
OOB=TRUE, type = "response")
partyModel <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = training, controls=cforest_unbiased(ntree=2000, mtry=3))
predsParty <- predict(partyModel, testingData,
OOB=TRUE, type = "response")
predsParty
predsParty <- predict(partyModel, testingData,
OOB=TRUE, type = "response")
predsParty <- as.character(predsParty)
predsParty[predsParty=="X1"] <- 0
predsParty[predsParty=="X2"] <- 1
predsParty <- as.numeric(predsParty)
predsParty <- data.frame(PassengerId=testingData$PassengerId,
Survived=predsParty)
write.csv(predsParty,file="titanic_party_solution.csv",
row.names=FALSE, quote=FALSE)
source('~/Coursera/RWorkingDirectory/TitanicKaggle.R', echo=TRUE)
source('~/Coursera/RWorkingDirectory/TitanicKaggle.R', echo=TRUE)
source('~/Coursera/RWorkingDirectory/TitanicKaggle.R', echo=TRUE)
?confusionMatrix
predictionsAda <- predict(modelAda, validationPredictors)
print(modelAda)
confM_Ada <- confusionMatrix(predictionsAda, validationLabels)
confM_Gbm <- confusionMatrix(predictionsGbm, validationLabels)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
data(iris) # load the iris dataset
# define an 60%/40% train/test split of the dataset
trainIndex <- createDataPartition(iris$Species, p=0.80, list=FALSE)
data_train <- iris[trainIndex,]
data_test <- iris[-trainIndex,]
# train a model, eg. a decision tree
model <- train(Species~., data=data_train, method='rpart')
# make predictions
predictions <- predict(model, data_test[,1:4])
# summarize results
confusionMatrix(predictions$class, data_test$Species)
confusionMatrix(predictions, data_test$Species)
cm <-confusionMatrix(predictions, data_test$Species)
cm$table
cm$overall
cm$dots
cm$positive
cm$byClass
heatmap.2(cm$table)
library(gplots)
heatmap.2(cm$table)
trainIndex <- createDataPartition(iris$Species,times=2 p=0.80, list=FALSE)
library(caret)
trainIndex <- createDataPartition(iris$Species,times=2 p=0.80, list=FALSE)
trainIndex <- createDataPartition(iris$Species,times=2, p=0.80, list=FALSE)
str(trainIndex)
iris$Species
str(iris)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=drv~.)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~cyl)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=drv~.)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=drv~.)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=drv~.)
predictionsRF <- predict(modelRF, validationPredictors)
predictionsRF
confM_RF <- confusionMatrix(predictionsRF, validationLabels)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
file=paste("titanic_solution_team_{}.csv",as.character(TeamNo),sep=""),
file=paste("titanic_solution_team_{}.csv",as.character(TeamNo),sep="")
TeamNo <- 8
file=paste("titanic_solution_team_{}.csv",as.character(TeamNo),sep="")
file
paste("titanic_solution_team_",as.character(TeamNo),".csv"sep=""),
paste("titanic_solution_team_",as.character(TeamNo),".csv"sep="")
paste("titanic_solution_team_",as.character(TeamNo),".csv",sep="")
paste("titanic_solution_team_",
as.character(TeamNo),".csv",sep="")
?predict
library(knitr)
pandox('index.md',format='pdf')
pandoc('index.md',format='pdf')
pandoc('index.md',format='pdf')
library(knitr)
pandox("index.md",format='pdf')
pandoc("index.md",format='pdf')
pandoc("index.md",format='pdf')
pandoc('index.md',format='pdf')
wd <- getwd()
wd
setwd("C:/Users/verhust/Documents/Coursera/RWorkingDirectory/slidesMLWorkshop")
getwd()
pandoc('index.md',format='pdf')
pandoc('index.md',format='latex')
?qplot
str(dataset)
type(dataset)
class(dataset)
class(dataset[,:])
cols(dataset)
class(dataset[,names(dataset)])
apply(class, dataset[,names(dataset)])
?applt
?apply
apply(dataset[,names(dataset)],FUN=class)
lapply(dataset[,names(dataset)],FUN=class)
lapply(dataset[,names(dataset)],FUN=class) == "character"
featureClasses <- lapply(dataset[,names(dataset)],FUN=class)
charFeatures <- featureClasses == "character"
charFeatures
predictFeatures <- dataset[,!charFeatures]
predictFeatures
predictFeatures <- names(!charFeatures)
predictFeatures
str(dataset)
predictFeatures <- names(dataset[,!charFeatures])
predictFeatures
# DO NOT EDIT, please!
# Read in the data from the .csv files,
# but avoid converting all Strings to factors.
trainInput <- read.csv("titanic_training.csv",
na.strings="NA",
stringsAsFactors=FALSE)
testInput <- read.csv("titanic_testing_variables.csv",
na.strings="NA",
stringsAsFactors=FALSE)
# Supplement the testing data with an empty column for "Survived"
testInput$Survived <- NA
# Combine the datasets into one large one for data manipulation
dataset <- rbind(trainInput,testInput)
# Some variables should be factors, convert these manually.
dataset$Sex <- as.factor(dataset$Sex)
dataset$Pclass <- as.factor(dataset$Pclass)
dataset$Survived <- as.factor(dataset$Survived)
featureClasses <- lapply(dataset[,names(dataset)],FUN=class)
charFeatures <- featureClasses == "character"
# TODO: use the boolean list above to create a vector of feature names
# for non-character features
predictFeatures <- #TODO fill me in!
predictFeatures <- names(dataset[,!charFeatures])
predictFeatures <- names(dataset[,!charFeatures])
predictFeatures
list(predictFeatures)
c(list(predictFeatures))
str(dataset)
summary(dataset)
is.na(dataset$Age),
is.na(dataset$Age)
sum(is.na(dataset$Age))
dataset$Name[1]
str(dataset)
cor(predictedAges,dataset[!NAAges,]$Age)
ageModel <- train(Age~Sex+Pclass+Embarked+Title+Parch+SibSp+FamilySize,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
#ageModel <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
#                data=dataset[!is.na(dataset$Age),], method="anova")
predictedAge <- predict(ageModel,dataset)
ageModel <- train(Age~Sex+Pclass+Embarked+Title+Parch+SibSp+FamilySize,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
#ageModel <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
#                data=dataset[!is.na(dataset$Age),], method="anova")
predictedAges <- predict(ageModel,dataset)
ageModel <- train(Age~Sex+Pclass+Embarked+Title,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
#ageModel <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
#                data=dataset[!is.na(dataset$Age),], method="anova")
predictedAges <- predict(ageModel,dataset)
ageModel <- train(Age~Sex+Pclass+Embarked+Parch+Fare+Sibsp,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
predictedAges <- predict(ageModel,dataset)
ageModel <- train(Age~Sex+Pclass+Embarked+Parch+Fare+Sibsp,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
predictedAges <- predict(ageModel,dataset)
library(caret)
ageModel <- train(Age~Sex+Pclass+Embarked+Parch+Fare+Sibsp,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
predictedAges <- predict(ageModel,dataset)
ageModel <- train(Age~Sex+Pclass+Embarked+Parch+Fare+SibSp,
method = "rf",data=dataset,
na.action = na.omit, preProcess = c("center", "scale"),
trControl = trainControl(method = "cv"))
predictedAges <- predict(ageModel,dataset)
cor(predictedAges,dataset[!NAAges,]$Age)
dataset[!NAAges,]$Age
NAAges <- is.na(dataset$Age) # Don't edit this, thanks
dataset[NAAges,]$Age <- 0 #
dataset[!NAAges,]$Age
dataset[NAAges,]$Age
cor(predictedAges,dataset[!NAAges,]$Age)
cor(predictedAges[!NAAges],dataset[!NAAges,]$Age)
predictFeatures
cm
confM_Ada
confM_Ada$overall
?confusionMatrix
?predict
predict?rf
?predict.rf
?predict.lm
